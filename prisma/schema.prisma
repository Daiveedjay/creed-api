generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                  @id @default(uuid())
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  email                 String                  @unique
  password              String
  fullName              String
  googleId              String?                 @unique
  username              String?
  jobTitle              String?
  department            String?
  location              String?
  language              String?
  availableHoursFrom    DateTime?
  availableHoursTo      DateTime?
  profilePicture        String?
  emailVerified         Boolean                 @default(false)
  otp                   String?
  otpLastModifiedAt     DateTime?
  otpReason             OTPReason?
  announcement          Announcement[]          @relation("Creator")
  assignedCollaborators AssignedCollaborators[]
  domains               Domain[]
  domainMembership      DomainMembership[]
  mentions              Mentions[]
  Notifications         Notifications[]
  panels                Panel[]
  panelMembership       PanelMembership[]
  subTasks              SubTask[]
  tasks                 Task[]
}

model Domain {
  id            String             @id @default(uuid())
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  name          String
  ownerId       String
  announcements Announcement[]
  owner         User               @relation(fields: [ownerId], references: [id])
  domainMembers DomainMembership[]
  panels        Panel[]
  panelMembers  PanelMembership[]
  status        Status[]
  tasks         Task[]
}

model DomainMembership {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String
  memberRole Roles    @default(member)
  domainId   String
  domain     Domain   @relation(fields: [domainId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Panel {
  id           String            @id @default(uuid())
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  name         String
  ownerId      String
  domainId     String
  domain       Domain            @relation(fields: [domainId], references: [id], onDelete: Cascade)
  owner        User              @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  panelMembers PanelMembership[]
  tasks        Task[]
}

model PanelMembership {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  domainId  String
  panelId   String
  domain    Domain   @relation(fields: [domainId], references: [id], onDelete: Cascade)
  panel     Panel    @relation(fields: [panelId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Status {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  domainId  String
  domain    Domain   @relation(fields: [domainId], references: [id], onDelete: Cascade)
  tasks     Task[]
}

model Task {
  id                    String                  @id @default(uuid())
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  title                 String
  description           String
  order                 Int
  assignedFrom          DateTime?
  assignedTo            DateTime?
  authorId              String
  statusId              String
  panelId               String
  domainId              String
  assignedCollaborators AssignedCollaborators[]
  Notifications         Notifications[]
  subTasks              SubTask[]
  author                User                    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  domain                Domain                  @relation(fields: [domainId], references: [id])
  panel                 Panel                   @relation(fields: [panelId], references: [id])
  Status                Status                  @relation(fields: [statusId], references: [id])
}

model AssignedCollaborators {
  id     String @id @default(uuid())
  userId String
  taskId String
  task   Task   @relation(fields: [taskId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
}

model SubTask {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  title        String
  done         Boolean  @default(false)
  authorId     String
  parentTaskId String
  author       User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parentTask   Task     @relation(fields: [parentTaskId], references: [id], onDelete: Cascade)
}

model Announcement {
  id            String          @id @default(uuid())
  content       String
  sentAt        DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  authorId      String
  domainId      String
  author        User            @relation("Creator", fields: [authorId], references: [id], onDelete: Cascade)
  domain        Domain          @relation(fields: [domainId], references: [id], onDelete: Cascade)
  mentions      Mentions[]
  Notifications Notifications[]
}

model Mentions {
  id             String       @id @default(uuid())
  userId         String
  announcementId String
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notifications {
  id             String        @id @default(uuid())
  userId         String
  taskId         String?
  announcementId String?
  hasRead        Boolean       @default(false)
  announcements  Announcement? @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  tasks          Task?         @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Roles {
  owner
  admin
  member
}

enum OTPReason {
  PasswordReset
}
