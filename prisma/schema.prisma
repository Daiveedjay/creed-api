// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email    String  @unique
  password String
  fullName String
  googleId String? @unique

  username           String?
  jobTitle           String?
  department         String?
  location           String?
  language           String?
  availableHoursFrom DateTime?
  availableHoursTo   DateTime?
  profilePicture     String?
  emailVerified      Boolean   @default(false)

  // extras
  otp               String?
  otpLastModifiedAt DateTime?
  otpReason         OTPReason?

  // Relations
  announcement     Announcement[]     @relation("Creator")
  tasks            Task[]
  subTasks         SubTask[]
  domainMembership DomainMembership[]
  panelMembership  PanelMembership[]
  domains          Domain[]
  mentions         Mentions[]
}

//Domain
model Domain {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name          String
  ownerId       String
  owner         User               @relation(fields: [ownerId], references: [id])
  announcements Announcement[]
  tasks         Task[]
  panels        Panel[]
  domainMembers DomainMembership[]
  panelMembers  PanelMembership[]
  status        Status[]
}

model DomainMembership {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId     String
  memberRole Roles  @default(member)
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  domainId String
  domain   Domain @relation(fields: [domainId], references: [id], onDelete: Cascade)
}

// TODO 
model Panel {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String

  // Relations
  tasks        Task[]
  panelMembers PanelMembership[]
  domainId     String
  domain       Domain            @relation(fields: [domainId], references: [id], onDelete: Cascade)
}

model PanelMembership {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  domainId String
  domain   Domain @relation(fields: [domainId], references: [id], onDelete: Cascade)

  panelId String
  panel   Panel  @relation(fields: [panelId], references: [id], onDelete: Cascade)
}

model Status {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String

  // relations
  domainId String
  domain   Domain @relation(fields: [domainId], references: [id], onDelete: Cascade)
  tasks    Task[]
}

model Task {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  description String

  // relations
  authorId String
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  Status   Status    @relation(fields: [statusId], references: [id])
  statusId String
  panel    Panel     @relation(fields: [panelId], references: [id])
  panelId  String
  domain   Domain    @relation(fields: [domainId], references: [id])
  domainId String
  subTasks SubTask[]
}

model SubTask {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title String
  done  Boolean @default(false)

  // relation
  authorId     String
  author       User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parentTaskId String
  parentTask   Task   @relation(fields: [parentTaskId], references: [id], onDelete: Cascade)
}

model Announcement {
  id        String     @id @default(uuid())
  content   String
  mentions  Mentions[]
  sentAt    DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // relation
  authorId String
  author   User   @relation("Creator", fields: [authorId], references: [id], onDelete: Cascade)
  domainId String
  domain   Domain @relation(fields: [domainId], references: [id], onDelete: Cascade)
}

model Mentions {
  id             String       @id @default(uuid())
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  announcementId String
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
}

enum Roles {
  owner
  admin
  member
}

enum OTPReason {
  PasswordReset
}
