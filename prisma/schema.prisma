// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email    String  @unique
  password String
  fullName String
  googleId String? @unique

  username           String?
  jobTitle           String?
  department         String?
  location           String?
  language           String?
  availableHoursFrom DateTime?
  availableHoursTo   DateTime?
  profilePicture     String?
  emailVerified      Boolean   @default(false)

  // extras
  otp               String?
  otpLastModifiedAt DateTime?
  otpReason         OTPReason?

  // Relations
  announcement     Announcement[]
  tasks            Task[]
  subTasks         SubTask[]
  domainMembership DomainMembership[]
  domains          Domain[]
}

model Domain {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name          String
  ownerId       String
  owner         User               @relation(fields: [ownerId], references: [id])
  announcements Announcement[]
  tasks         Task[]
  panels        Panel[]
  domainMembers DomainMembership[]
  status        Status[]
}

model DomainMembership {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId     String
  memberRole Roles  @default(Member)
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  panelId  String?
  panel    Panel?  @relation(fields: [panelId], references: [id], onDelete: Cascade)
  domainId String
  domain   Domain  @relation(fields: [domainId], references: [id], onDelete: Cascade)
}

// TODO: Should be called Panel instead
model Panel {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  // statusOrder String? // TODO: Write code to handle this

  // Relations
  tasks        Task[]
  panelMembers DomainMembership[]
  domainId     String
  domain       Domain             @relation(fields: [domainId], references: [id], onDelete: Cascade)
}

model Status {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String

  // relations
  domainId String
  domain   Domain @relation(fields: [domainId], references: [id], onDelete: Cascade)
  tasks    Task[]
}

model Task {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  text        String
  description String

  // relations
  authorId String
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  Status   Status    @relation(fields: [statusId], references: [id])
  statusId String
  panel    Panel     @relation(fields: [panelId], references: [id])
  panelId  String
  domain   Domain    @relation(fields: [domainId], references: [id])
  domainId String
  subTasks SubTask[]
}

model SubTask {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  text String
  done Boolean @default(false)

  // relation
  authorId     String
  author       User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parentTaskId String
  parentTask   Task   @relation(fields: [parentTaskId], references: [id], onDelete: Cascade)
}

model Announcement {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relation
  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  domainId String
  domain   Domain @relation(fields: [domainId], references: [id], onDelete: Cascade)
}

enum Roles {
  Owner
  Admin
  Member
}

enum OTPReason {
  PasswordReset
}
