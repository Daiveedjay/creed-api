name: Deploy application

on:
  push:
    branches:
      - brown

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Deploy to Server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.HOSTINGER_HOST}}
          username: ${{ secrets.HOSTINGER_USERNAME }}
          password: ${{ secrets.HOSTINGER_SSH_KEY }}
          port: ${{ secrets.HOSTINGER_PORT }}
          script: |
            # Check for .env file and recreate it
            if [ -f ".env" ]; then
              rm .env
            fi

            touch .env
            echo "PORT=3000" >> ".env"
            echo -e "PORT=3000\nDATABASE_URL=${{ secrets.DATABASE_URL }}" > .env
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> ".env"
            echo "CLIENT_APP_URL=${{ secrets.CLIENT_APP_URL }}" >> ".env"
            echo "GOOGLE_API_BASE_URL=${{ secrets.GOOGLE_API_BASE_URL }}" >> ".env"
            echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> ".env"
            echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> ".env"
            echo "IAM_USERNAME=${{ secrets.IAM_USERNAME }}" >> ".env"
            echo "SMTP_ENDPOINT=${{ secrets.SMTP_ENDPOINT }}" >> ".env"
            echo "SMTP_PORT=${{ secrets.SMTP_PORT }}" >> ".env"
            echo "SMTP_USERNAME=${{ secrets.SMTP_USERNAME }}" >> ".env"
            echo "SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}" >> ".env"
            echo "FIREBASE_PRIVATE_KEY=${{ secrets.FIREBASE_PRIVATE_KEY }}" >> ".env"
            echo "FIREBASE_CLIENT_EMAIL=${{ secrets.FIREBASE_CLIENT_EMAIL }}" >> ".env"
            echo "FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}" >> ".env"
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> ".env"
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ".env"
            echo "AWS_S3_BUCKET_NAME=${{ secrets.AWS_S3_BUCKET_NAME }}" >> ".env"

            echo ".env file successfully created."

            # Create Docker network if not exists
            if ! docker network ls | grep -q "kreed" ; then
              docker network create kreed
            fi

            # Stop and remove existing kreed_api container
            docker ps -q --filter "name=kreed_api" | grep -q . && docker stop kreed_api && docker rm kreed_api || true

            # Remove old Docker image
            docker images -q kreed_api:latest | grep -q . && docker rmi kreed_api:latest || true

            # Build Docker image
            docker build --no-cache -t kreed_api:latest .

            # Ensure Redis container is running and attached to the network
            if ! docker ps -q --filter "name=redis" | grep -q . ; then
              docker run -d --name redis --network kreed -p 6379:6379 redis:alpine
            else
              docker network connect kreed redis || true
            fi

            # Run the newly built Docker image and connect it to the same network as Redis
            docker run -d --name kreed_api --network kreed -p 3000:3000 kreed_api:latest

            # Optionally restart Caddy (if needed)
            #
            #
