name: Deploy CI

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      
      - name: Seting up SSH and Deploy
        run: |
          # Set up SSH key
          mkdir -p ~/.ssh
          echo "${{ secrets.DO_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.DO_HOST }} >> ~/.ssh/known_hosts

          # SSH into the server and execute commands
          ssh ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }} << 'EOF'
            cd /path/to/your/app

            # Recreate the .env file securely
            cat <<EOT > .env
            PORT=3000
            DATABASE_URL=$DATABASE_URL
            JWT_SECRET=$JWT_SECRET
            CLIENT_APP_URL=$CLIENT_APP_URL
            GOOGLE_API_BASE_URL=$GOOGLE_API_BASE_URL
            GOOGLE_CLIENT_ID=$GOOGLE_CLIENT_ID
            GOOGLE_CLIENT_SECRET=$GOOGLE_CLIENT_SECRET
            IAM_USERNAME=$IAM_USERNAME
            SMTP_ENDPOINT=$SMTP_ENDPOINT
            SMTP_PORT=$SMTP_PORT
            SMTP_USERNAME=$SMTP_USERNAME
            SMTP_PASSWORD=$SMTP_PASSWORD
            FIREBASE_PRIVATE_KEY=$FIREBASE_PRIVATE_KEY
            FIREBASE_CLIENT_EMAIL=$FIREBASE_CLIENT_EMAIL
            FIREBASE_PROJECT_ID=$FIREBASE_PROJECT_ID
            AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
            AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
            AWS_S3_BUCKET_NAME=$AWS_S3_BUCKET_NAME
            EOT

            # Ensure Docker network exists
            if ! sudo docker network ls | grep -q "kreed" ; then
              sudo docker network create kreed
            fi

            # Stop and remove existing kreed_api container
            sudo docker ps -q --filter "name=kreed_api" | grep -q . && sudo docker stop kreed_api && sudo docker rm kreed_api || true

            # Remove old Docker image
            sudo docker images -q kreed_api:latest | grep -q . && sudo docker rmi kreed_api:latest || true

            # Build new Docker image
            sudo docker build --no-cache -t kreed_api:latest .

            # Ensure Redis container is running
            if ! sudo docker ps -q --filter "name=redis" | grep -q . ; then
              sudo docker run -d --name redis --network kreed -p 6379:6379 redis:alpine
            else
              sudo docker network connect kreed redis || true
            fi

            # Run the new Docker container
            sudo docker run -d --name kreed_api --network kreed -p 3000:3000 kreed_api:latest
          EOF

